{"ast":null,"code":"const User = require('../models/User');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\n\n// Register a New User\nconst registerUser = async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      role\n    } = req.body;\n    if (!name || !email || !password || !role) {\n      return res.status(400).json({\n        message: \"All fields are required\"\n      });\n    }\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n      role\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: \"User registered successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error in registerUser:\", error);\n    res.status(500).json({\n      message: \"Server Error\"\n    });\n  }\n};\n\n// Login User\nconst loginUser = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    if (!email || !password) {\n      return res.status(400).json({\n        message: \"Please provide email and password\"\n      });\n    }\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n    const token = jwt.sign({\n      id: user._id,\n      role: user.role\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      message: \"Login successful\",\n      token,\n      user: {\n        id: user._id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n};\n\n// Get User Profile\nconst getUserProfile = async (req, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'User not authenticated'\n      });\n    }\n    const user = await User.findById(req.user.id).select('-password');\n    if (!user) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    res.status(500).json({\n      message: 'Server error'\n    });\n  }\n};\n\n// ✅ Ensure all functions are properly exported\nmodule.exports = {\n  registerUser,\n  loginUser,\n  getUserProfile\n};","map":{"version":3,"names":["User","require","jwt","bcrypt","registerUser","req","res","name","email","password","role","body","status","json","message","salt","genSalt","hashedPassword","hash","newUser","save","error","console","loginUser","user","findOne","isMatch","compare","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","getUserProfile","findById","select","module","exports"],"sources":["/home/kali/Music/timirda/healthcare-system/healthcare-frontend/src/services/authService.js"],"sourcesContent":["const User = require('../models/User');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\n\n// Register a New User\nconst registerUser = async (req, res) => {\n    try {\n        const { name, email, password, role } = req.body;\n        if (!name || !email || !password || !role) {\n            return res.status(400).json({ message: \"All fields are required\" });\n        }\n\n        const salt = await bcrypt.genSalt(10);\n        const hashedPassword = await bcrypt.hash(password, salt);\n\n        const newUser = new User({\n            name,\n            email,\n            password: hashedPassword,\n            role\n        });\n\n        await newUser.save();\n        res.status(201).json({ message: \"User registered successfully\" });\n\n    } catch (error) {\n        console.error(\"Error in registerUser:\", error);\n        res.status(500).json({ message: \"Server Error\" });\n    }\n};\n\n// Login User\nconst loginUser = async (req, res) => {\n    try {\n        const { email, password } = req.body;\n        if (!email || !password) {\n            return res.status(400).json({ message: \"Please provide email and password\" });\n        }\n\n        const user = await User.findOne({ email });\n        if (!user) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        const isMatch = await bcrypt.compare(password, user.password);\n        if (!isMatch) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        const token = jwt.sign(\n            { id: user._id, role: user.role },\n            process.env.JWT_SECRET,\n            { expiresIn: \"1h\" }\n        );\n\n        res.json({\n            message: \"Login successful\",\n            token,\n            user: { id: user._id, email: user.email, name: user.name, role: user.role }\n        });\n\n    } catch (error) {\n        console.error(\"Login Error:\", error);\n        res.status(500).json({ message: \"Server error\" });\n    }\n};\n\n// Get User Profile\nconst getUserProfile = async (req, res) => {\n    try {\n        if (!req.user) {\n            return res.status(401).json({ message: 'User not authenticated' });\n        }\n\n        const user = await User.findById(req.user.id).select('-password');\n        if (!user) {\n            return res.status(404).json({ message: 'User not found' });\n        }\n\n        res.json(user);\n    } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n        res.status(500).json({ message: 'Server error' });\n    }\n};\n\n// ✅ Ensure all functions are properly exported\nmodule.exports = { registerUser, loginUser, getUserProfile };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}