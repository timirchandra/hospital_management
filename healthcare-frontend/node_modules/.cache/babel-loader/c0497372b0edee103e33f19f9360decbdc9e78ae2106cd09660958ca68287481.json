{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\n\n// Helper function to get headers\nconst getHeaders = token => ({\n  Authorization: `Bearer ${token}`,\n  \"Content-Type\": \"application/json\"\n});\n\n// Register a new patient\nexport const registerPatient = async (patientData, token) => {\n  try {\n    if (!token) throw new Error(\"Unauthorized: No token provided\");\n    const response = await axios.post(`${API_BASE_URL}/patients/register`, patientData, {\n      headers: getHeaders(token)\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Patient Registration Error:\", error.response || error.message);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Patient registration failed\";\n  }\n};\n\n// Get all patients (Only ONE declaration of this function)\nexport const getAllPatients = async token => {\n  try {\n    if (!token) throw new Error(\"Unauthorized: No token provided\");\n    const response = await axios.get(`${API_BASE_URL}/patients`, {\n      headers: getHeaders(token)\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error(\"Fetch Patients Error:\", error.response || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Failed to fetch patients\";\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getHeaders","token","Authorization","registerPatient","patientData","Error","response","post","headers","data","error","_error$response","_error$response$data","console","message","getAllPatients","get","_error$response2","_error$response2$data"],"sources":["/home/kali/Music/timirda/healthcare-system/healthcare-frontend/src/services/patientService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\n\n// Helper function to get headers\nconst getHeaders = (token) => ({\n  Authorization: `Bearer ${token}`,\n  \"Content-Type\": \"application/json\",\n});\n\n// Register a new patient\nexport const registerPatient = async (patientData, token) => {\n  try {\n    if (!token) throw new Error(\"Unauthorized: No token provided\");\n\n    const response = await axios.post(`${API_BASE_URL}/patients/register`, patientData, {\n      headers: getHeaders(token),\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Patient Registration Error:\", error.response || error.message);\n    throw error.response?.data?.message || \"Patient registration failed\";\n  }\n};\n\n// Get all patients (Only ONE declaration of this function)\nexport const getAllPatients = async (token) => {\n  try {\n    if (!token) throw new Error(\"Unauthorized: No token provided\");\n\n    const response = await axios.get(`${API_BASE_URL}/patients`, {\n      headers: getHeaders(token),\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Fetch Patients Error:\", error.response || error.message);\n    throw error.response?.data?.message || \"Failed to fetch patients\";\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;;AAEtF;AACA,MAAMC,UAAU,GAAIC,KAAK,KAAM;EAC7BC,aAAa,EAAE,UAAUD,KAAK,EAAE;EAChC,cAAc,EAAE;AAClB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAEH,KAAK,KAAK;EAC3D,IAAI;IACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAII,KAAK,CAAC,iCAAiC,CAAC;IAE9D,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,YAAY,oBAAoB,EAAEQ,WAAW,EAAE;MAClFI,OAAO,EAAER,UAAU,CAACC,KAAK;IAC3B,CAAC,CAAC;IAEF,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACI,OAAO,CAAC;IAC7E,MAAM,EAAAH,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,6BAA6B;EACtE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOd,KAAK,IAAK;EAC7C,IAAI;IACF,IAAI,CAACA,KAAK,EAAE,MAAM,IAAII,KAAK,CAAC,iCAAiC,CAAC;IAE9D,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACqB,GAAG,CAAC,GAAGpB,YAAY,WAAW,EAAE;MAC3DY,OAAO,EAAER,UAAU,CAACC,KAAK;IAC3B,CAAC,CAAC;IAEF,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACdL,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACI,OAAO,CAAC;IACvE,MAAM,EAAAG,gBAAA,GAAAP,KAAK,CAACJ,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,0BAA0B;EACnE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}