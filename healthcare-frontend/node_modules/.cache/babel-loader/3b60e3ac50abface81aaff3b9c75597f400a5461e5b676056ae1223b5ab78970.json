{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api/patients\";\n\n// Function to fetch all patients\nexport const getAllPatients = async token => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching patients:\", error);\n    throw error;\n  }\n};\n\n// Function to register a new patient\nexport const registerPatient = async (patientData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, patientData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error registering patient:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getAllPatients","token","response","get","headers","Authorization","data","error","console","registerPatient","patientData","post"],"sources":["/home/kali/Music/timirda/healthcare-system/healthcare-frontend/src/services/patientService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:5000/api/patients\";\n\n// Function to fetch all patients\nexport const getAllPatients = async (token) => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching patients:\", error);\n    throw error;\n  }\n};\n\n// Function to register a new patient\nexport const registerPatient = async (patientData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, patientData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error registering patient:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC;;AAEpD;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,OAAO,EAAE;MACxCK,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,KAAK;MAAG;IAC9C,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAET,KAAK,KAAK;EAC3D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACa,IAAI,CAAC,GAAGZ,OAAO,WAAW,EAAEW,WAAW,EAAE;MACpEN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}