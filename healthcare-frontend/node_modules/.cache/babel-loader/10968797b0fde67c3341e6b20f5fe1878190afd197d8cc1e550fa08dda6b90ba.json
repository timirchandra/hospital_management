{"ast":null,"code":"var _jsxFileName = \"/home/kali/Music/timirda/healthcare-system/healthcare-frontend/src/context/PatientContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { getAllPatients } from \"../services/patientService\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PatientContext = /*#__PURE__*/createContext();\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const {\n    token\n  } = useAuth();\n  useEffect(() => {\n    if (token) {\n      fetchPatients();\n    }\n  }, [token]);\n  const fetchPatients = async () => {\n    try {\n      const data = await getAllPatients(token);\n      setPatients(data);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: {\n      patients,\n      fetchPatients\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientProvider, \"BolbWQ+p6lYwiUinnrBZTiIbv0A=\", false, function () {\n  return [useAuth];\n});\n_c = PatientProvider;\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","getAllPatients","useAuth","jsxDEV","_jsxDEV","PatientContext","PatientProvider","children","_s","patients","setPatients","token","fetchPatients","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kali/Music/timirda/healthcare-system/healthcare-frontend/src/context/PatientContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { getAllPatients } from \"../services/patientService\";\nimport { useAuth } from \"../hooks/useAuth\";\n\nexport const PatientContext = createContext();\n\nexport const PatientProvider = ({ children }) => {\n  const [patients, setPatients] = useState([]);\n  const { token } = useAuth();\n\n  useEffect(() => {\n    if (token) {\n      fetchPatients();\n    }\n  }, [token]);\n\n  const fetchPatients = async () => {\n    try {\n      const data = await getAllPatients(token);\n      setPatients(data);\n    } catch (error) {\n      console.error(\"Error fetching patients:\", error);\n    }\n  };\n\n  return (\n    <PatientContext.Provider value={{ patients, fetchPatients }}>\n      {children}\n    </PatientContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,OAAO,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMQ,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IAAEY;EAAM,CAAC,GAAGT,OAAO,CAAC,CAAC;EAE3BF,SAAS,CAAC,MAAM;IACd,IAAIW,KAAK,EAAE;MACTC,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;EAEX,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMZ,cAAc,CAACU,KAAK,CAAC;MACxCD,WAAW,CAACG,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACEV,OAAA,CAACC,cAAc,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,QAAQ;MAAEG;IAAc,CAAE;IAAAL,QAAA,EACzDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACb,EAAA,CAxBWF,eAAe;EAAA,QAERJ,OAAO;AAAA;AAAAoB,EAAA,GAFdhB,eAAe;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}